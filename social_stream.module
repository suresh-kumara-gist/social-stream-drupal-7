<?php

/**
 * @file
 * Social stream .module file all hooks implemented here.
 */

/**
 * Implements hook_menu().
 */
function social_stream_menu() {
  $items['admin/config/media/socialfield/social-stream'] = [
    'title' => 'Social stream widget ',
    'description' => 'Social stream widget settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['social_stream_settings'],
    'access arguments' => ['view services'],
    'type' => MENU_NORMAL_ITEM,
  ];
  // Twitter and facebook service callback.
  $items['rest/social-stream/%'] = [
    'page callback' => 'social_stream_rest',
    // Ajax call anonymous user can also call this api.
    'access callback' => TRUE,
    'page arguments' => [2],
  ];
  return $items;
}

/**
 * Twitter and facebook service callback handler.
 */
function social_stream_rest($social_service) {
  if ($social_service != '') {
    /*
     * Php variable function $social_service_func().
     */
    $social_service_func = "social_stream_" . $social_service . "_rest";
    /*
     * Log error if declaration not found for service (currently
     * twitter and facebook declaration exist).
     */
    module_load_include('inc', 'social_stream', 'includes/social_stream_' . $social_service . '_rest');
    if (function_exists($social_service_func)) {
      return $social_service_func();
    }
    else {
      $message = t("declaration not found for the service called in url. 
        (currently twitter and facebook declaration exist)");
      watchdog('social_stream', $message, [], WATCHDOG_ERROR);
    }
  }
  else {
    // Log error if declaration arguments not found.
    $message = t("if service not found in url. pass service name "
        . "in url see the pagecallback in hook_menu", [
          ''
        ]);
    watchdog('social_stream', $message, [], WATCHDOG_ERROR);
  }
}

/**
 * Table that displays all available services.
 */
function social_stream_settings($form, &$form_state) {
  global $base_url;
  $path = libraries_get_path('jquery-social-stream');
  $form = [];
  $form['general'] = [
    '#type' => 'fieldset',
    '#title' => t('General'),
  ];
  $form['general']['social_stream_js_stream'] = [
    '#type' => 'textfield',
    '#title' => t('jquery.social.stream Javascript file name'),
    '#default_value' => variable_get('social_stream_js_stream', 'jquery.social.stream.1.5.9.min.js'),
  ];
  $form['general']['social_stream_js_wall'] = [
    '#type' => 'textfield',
    '#title' => t('jquery.social.stream.wall Javascript file name'),
    '#default_value' => variable_get('social_stream_js_wall', 'jquery.social.stream.wall.1.6.js'),
    '#description' => t('These files should exist in the jQuery Social Stream library in the js/ directory.'),
  ];
  // Twitter fields bigins.
  $form['twitter'] = [
    '#type' => 'fieldset',
    '#title' => t('Twitter'),
    '#description' => t('To make Twitter feeds appear, you need to create a '
        . 'Twitter app and enter the oAuth credentials here.  For details in '
        . 'this process, see the !link.', [
          '!link' => l(t('jQuery Social Stream documentation'),
          $path . '/index.html', [
            'fragment' => 'twitter-api',
          ]
        )]),
  ];
  $form['twitter']['social_stream_twitter_consumer_key'] = [
    '#type' => 'textfield',
    '#title' => t('Consumer key'),
    '#default_value' => variable_get('social_stream_twitter_consumer_key', ''),
  ];
  $form['twitter']['social_stream_twitter_consumer_secret'] = [
    '#type' => 'textfield',
    '#title' => t('Consumer secret'),
    '#default_value' => variable_get('social_stream_twitter_consumer_secret', ''),
  ];
  $form['twitter']['social_stream_twitter_oauth_access_token'] = [
    '#type' => 'textfield',
    '#title' => t('oAuth access token'),
    '#default_value' => variable_get('social_stream_twitter_oauth_access_token', ''),
  ];
  $form['twitter']['social_stream_twitter_oauth_access_token_secret'] = [
    '#type' => 'textfield',
    '#title' => t('oAuth access token secret'),
    '#default_value' => variable_get('social_stream_twitter_oauth_access_token_secret', ''),
  ];
  $form['twitter']['social_stream_twitter_days'] = [
    '#type' => 'textfield',
    '#title' => t('Enter number of days old twitter post to be displayed.'),
    '#field_suffix' => t('days'),
    '#default_value' => variable_get('social_stream_twitter_days', '365'),
    '#description' => t("Enter number of days old twitter post to be displayed. "
        . "by default 365 days"),
    '#attribute' => [
      'onkeypress' => 'return isNumber(event)',
    ],
    '#maxlength' => 3,
  ];
  // Twitter fields ends.
  // Instagram fields starts.
  $form['instagram'] = [
    '#type' => 'fieldset',
    '#title' => t('Instagram'),
    '#description' => t('To make Instagram feeds appear, you need to create an '
        . 'Instagram app and enter the oAuth credentials here.  For details in '
        . 'this process, see the !link under "Plugin Options".', [
          '!link' => l(t('jQuery Social Stream documentation'),
              $path . '/index.html', [
                'fragment' => '',
              ]),
        ]),
  ];
  $form['instagram']['social_stream_instagram_client_id'] = [
    '#type' => 'textfield',
    '#title' => t('Client ID'),
    '#default_value' => variable_get('social_stream_instagram_client_id', ''),
  ];
  $form['instagram']['social_stream_instagram_redirect_url'] = [
    '#type' => 'textfield',
    '#description' => t('The url to redirect to in order to obtain the client '
        . 'ID (see link above for details).'),
    '#title' => t('Redirect URL'),
    '#default_value' => variable_get('social_stream_instagram_redirect_url', 
        $base_url),
  ];

  /*
   * @todo 
   * Need to add select option for other services.
   */
  $form['instagram']['instagram_feeds_type'] = [
    '#type' => 'select',
    '#description' => t("Select instagram feeds type."),
    '#title' => t('Instagram Feeds Type'),
    '#options' => [
      
    /*
     *  'media_search' => 'Media search',
     *  'tags_media_recent' => 'Tags media recent',
     */
      'users_media_recent' => 'Users media recent',

    /*
     * 'locations_media_recent' => 'Locations media recent',
     */
    ],
    '#default_value' => variable_get('instagram_feeds_type', 
        'users_media_recent'),
  ];
  return system_settings_form($form);
}

// ******************************* FIELD FORMATTERS ***************************** //
/**
* Implements hook_field_formatter_info().
*/
function social_stream_field_formatter_info() {
  $info = [
    'social_stream' => [
      'label' => t('Social Stream feed'),
      'field types' => ['social_links_field'],
      'settings'  => [
        'height' => 480,
        'theme' => 'light',
      ],
    ],
    'social_stream_wall' => [
      'label' => t('Social Stream wall'),
      'field types' => ['social_links_field'],
      'settings'  => [
        'theme' => 'light',
      ],
    ],
  ];
  return $info;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function social_stream_field_formatter_settings_form(
    $field,
    $instance,
    $view_mode,
    $form,
    &$form_state) {
  $element = [];
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  // Add fields.
  switch ($display['type']) {
    case 'social_stream':
      $element['markup'] = [
        '#type' => 'markup',
        '#markup' => '<p>' . t('Be sure to set the !link if you are using '
            . 'Twitter or Instagram.', [
              '!link' => l(t('Social Stream settings'),
                  'admin/config/media/socialfield/social-stream')
              ]) . '</p>',
      ];
      $element['theme'] = [
        '#title' => t('Theme'),
        '#type' => 'select',
        '#default_value' => $settings['theme'],
        '#options' => [
          'light' => t('Light'),
          'dark' => t('Dark'),
        ],
      ];
      $element['height'] = [
        '#title' => t('Height'),
        '#type' => 'textfield',
        '#default_value' => $settings['height'],
        '#field_suffix' => ' px',
      ];
      break;

    case 'social_stream_wall':
      $element['markup'] = [
        '#type' => 'markup',
        '#markup' => '<p>' . t('Be sure to set the !link if you are using '
            . 'Twitter or Instagram.', [
              '!link' => l(t('Social Stream settings'),
                  'admin/config/media/socialfield/social-stream'),
              ]) . '</p>',
      ];
      $element['theme'] = [
        '#title' => t('Theme'),
        '#type' => 'select',
        '#default_value' => $settings['theme'],
        '#options' => [
          'light' => t('Light'),
          'dark' => t('Dark'),
        ],
      ];
      break;
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */

function social_stream_field_formatter_settings_summary(
    $field,
    $instance,
    $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = [];
  foreach ($settings as $key => $value) {
    if (!is_array($value)) {
      $summary[] = $key . ': ' . $value;
    }
  }
  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function social_stream_field_formatter_view(
    $entity_type,
    $entity,
    $field,
    $instance,
    $langcode,
    $items,
    $display) {
  $element = [];
  $settings = $display['settings'];
  $settings['type'] = $display['type'];
  $feeds = [];
  foreach ($items as $item) {
    $feeds[$item['service']] = $item['url'];
  }
  $settings['feeds'] = $feeds;
  $element[0]['#markup'] = theme('social_stream', $settings);
  return $element;
}

/******************************* THEME FUNCTIONS ***************************** */
/**
 * Implements hook_theme().
 */
function social_stream_theme() {
  return [
    'social_stream' => [
      'template' => 'templates/social-stream',
      'variables' => [
        'feeds' => [],
        'type' => '',
        'height' => '',
        'theme' => 'light',
        'limit' => 15,
        'no_library' => FALSE,
      ],
    ],
  ];
}

/**
 * Implements hook_theme_preprocess().
 */
function template_preprocess_social_stream(&$variables) {
  $path = libraries_get_path('jquery-social-stream');
  if (empty($path)) {
    $variables['no_library'] = TRUE;
  }
  // Add library files.
  drupal_add_js($path . '/inc/js/jquery.plugins.js');
  drupal_add_js($path . '/inc/js/jquery.site.js');
  drupal_add_js($path . '/js/' . variable_get('social_stream_js_stream',
      'jquery.social.stream.1.5.9.min.js'));
  if ($variables['type'] === 'social_stream_wall') {
    drupal_add_css($path . '/css/dcsns_wall.css');
    drupal_add_js($path . '/js/' . variable_get('social_stream_js_wall',
      'jquery.social.stream.wall.1.6.js'));
  }
  else {
    drupal_add_css($path . '/css/dcsns_' . $variables['theme'] . '.css');
  }
  // Clean up feeds.
  $feeds = array();
  foreach ($variables['feeds'] as $service => $feed) {
    if (strpos($feed, 'http') !== FALSE) {
      $feed = explode('/', $feed);
      if ($feed[count($feed) - 3] == "www.pinterest.com") {
        $feed = implode('/', [$feed[count($feed) - 2], $feed[count($feed) - 1]]);
      }
      elseif ($feed[2] == "rss.com") {
        $feed = implode('/', array_slice($feed, 3));
      }
      else {
        $feed = $feed[count($feed) - 1];
      }
    }
    $feeds[$service] = array('id' => $feed);
  }
  /*
   * @todo service url are hard coded need to make dynamic
   */
  if (isset($feeds['twitter']) && !empty($feeds['twitter'])) {
    // Example id: '157969574262873'.
    // Example out: 'intro,thumb,text,user,share'.
    $feeds['twitter']['url'] = url('rest/social-stream/twitter');
  }
  if (isset($feeds['facebook']) && !empty($feeds['facebook'])) {
    $feeds['facebook']['url'] = url('rest/social-stream/facebook');
  }
  if (isset($feeds['rss']) && !empty($feeds['rss'])) {
    $feeds['rss']['url'] = url('rest/social-stream/rss');
  }
  if (isset($feeds['pinterest']) && !empty($feeds['pinterest'])) {
    $feeds['pinterest']['url'] = url('rest/social-stream/rss');
  }
  if (isset($feeds['instagram']) && !empty($feeds['instagram'])) {
    $ift = variable_get("instagram_feeds_type", "users_media_recent");
    switch ($ift) {
      case 'media_search':
        $feeds['instagram']['id'] = '?' . $feeds['instagram']['id'];
        break;

      case 'tags_media_recent':
        $feeds['instagram']['id'] = '#' . $feeds['instagram']['id'];
        break;

      case 'users_media_recent':
        $feeds['instagram']['id'] = '!' . $feeds['instagram']['id'];
        break;

      case 'locations_media_recent':
        $feeds['instagram']['id'] = '@' . $feeds['instagram']['id'];
        break;

    }
		$feeds['instagram']['accessToken'] = variable_get(
      "socialfeed_instagram_access_token", "");
    $feeds['instagram']['clientId'] = variable_get(
      "socialfeed_instagram_client_id", "");
  }
  // Add Settings.
  $image_path = url($path . '/images/dcsns-' . $variables['theme'] . '/');
  $settings = array(
    'type' => 'wall',
    'limit' => $variables['limit'],
    'feeds' => $feeds,
    'iconPath' => $image_path,
    'imagePath' => $image_path,
    'height' => $variables['height'],
  );
  $social_stream_twitter_days = variable_get('social_stream_twitter_days', '');
  if ($social_stream_twitter_days != '') {
    $settings['days'] = $social_stream_twitter_days;
  }
  drupal_add_js(array('social_stream' => $settings), 'setting');
  // Add module js.
  drupal_add_js(drupal_get_path('module', 'social_stream') . '/js/social-stream.js');
}
